// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination mock_test.go --package media_test
//

// Package media_test is a generated GoMock package.
package media_test

import (
	context "context"
	io "io"
	reflect "reflect"

	domain "github.com/HBeserra/GoShop/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockFileStorage is a mock of FileStorage interface.
type MockFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageMockRecorder
	isgomock struct{}
}

// MockFileStorageMockRecorder is the mock recorder for MockFileStorage.
type MockFileStorageMockRecorder struct {
	mock *MockFileStorage
}

// NewMockFileStorage creates a new mock instance.
func NewMockFileStorage(ctrl *gomock.Controller) *MockFileStorage {
	mock := &MockFileStorage{ctrl: ctrl}
	mock.recorder = &MockFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorage) EXPECT() *MockFileStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFileStorage) Delete(filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileStorageMockRecorder) Delete(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileStorage)(nil).Delete), filename)
}

// Get mocks base method.
func (m *MockFileStorage) Get(filename string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileStorageMockRecorder) Get(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFileStorage)(nil).Get), filename)
}

// GetURL mocks base method.
func (m *MockFileStorage) GetURL(filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockFileStorageMockRecorder) GetURL(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockFileStorage)(nil).GetURL), filename)
}

// Save mocks base method.
func (m *MockFileStorage) Save(file io.Reader, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", file, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockFileStorageMockRecorder) Save(file, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileStorage)(nil).Save), file, filename)
}

// MockMediaRepository is a mock of MediaRepository interface.
type MockMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMediaRepositoryMockRecorder
	isgomock struct{}
}

// MockMediaRepositoryMockRecorder is the mock recorder for MockMediaRepository.
type MockMediaRepositoryMockRecorder struct {
	mock *MockMediaRepository
}

// NewMockMediaRepository creates a new mock instance.
func NewMockMediaRepository(ctrl *gomock.Controller) *MockMediaRepository {
	mock := &MockMediaRepository{ctrl: ctrl}
	mock.recorder = &MockMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaRepository) EXPECT() *MockMediaRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMediaRepository) Delete(ctx context.Context, namespace string, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, namespace, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMediaRepositoryMockRecorder) Delete(ctx, namespace, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMediaRepository)(nil).Delete), ctx, namespace, id)
}

// GetByID mocks base method.
func (m *MockMediaRepository) GetByID(ctx context.Context, namespace string, id uuid.UUID) (*domain.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, namespace, id)
	ret0, _ := ret[0].(*domain.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMediaRepositoryMockRecorder) GetByID(ctx, namespace, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMediaRepository)(nil).GetByID), ctx, namespace, id)
}

// Save mocks base method.
func (m *MockMediaRepository) Save(ctx context.Context, namespace string, media *domain.Media) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, namespace, media)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockMediaRepositoryMockRecorder) Save(ctx, namespace, media any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMediaRepository)(nil).Save), ctx, namespace, media)
}

// MockFileCompressor is a mock of FileCompressor interface.
type MockFileCompressor struct {
	ctrl     *gomock.Controller
	recorder *MockFileCompressorMockRecorder
	isgomock struct{}
}

// MockFileCompressorMockRecorder is the mock recorder for MockFileCompressor.
type MockFileCompressorMockRecorder struct {
	mock *MockFileCompressor
}

// NewMockFileCompressor creates a new mock instance.
func NewMockFileCompressor(ctrl *gomock.Controller) *MockFileCompressor {
	mock := &MockFileCompressor{ctrl: ctrl}
	mock.recorder = &MockFileCompressorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileCompressor) EXPECT() *MockFileCompressorMockRecorder {
	return m.recorder
}

// Compress mocks base method.
func (m *MockFileCompressor) Compress(file io.Reader, level int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compress", file, level)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compress indicates an expected call of Compress.
func (mr *MockFileCompressorMockRecorder) Compress(file, level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compress", reflect.TypeOf((*MockFileCompressor)(nil).Compress), file, level)
}

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CheckPermissions mocks base method.
func (m *MockAuthService) CheckPermissions(ctx context.Context, userID uuid.UUID, namespace string, permission ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, userID, namespace}
	for _, a := range permission {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckPermissions", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermissions indicates an expected call of CheckPermissions.
func (mr *MockAuthServiceMockRecorder) CheckPermissions(ctx, userID, namespace any, permission ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, userID, namespace}, permission...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermissions", reflect.TypeOf((*MockAuthService)(nil).CheckPermissions), varargs...)
}

// GetUserID mocks base method.
func (m *MockAuthService) GetUserID(ctx context.Context) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockAuthServiceMockRecorder) GetUserID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthService)(nil).GetUserID), ctx)
}
